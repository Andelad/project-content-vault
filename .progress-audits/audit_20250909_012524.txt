# Duplicate Audit - Tue Sep  9 01:25:24 BST 2025

## Project Type Definitions
Files containing Project interfaces/types:
- src//types/core.ts
3:export type ProjectStatus = 'current' | 'future' | 'archived';
14:export interface Project {

- src//contexts/index.ts
11:export type { Project, Group, Row, Milestone } from '@/types/core';

- src//hooks/useProjectModalState.ts
4:interface UseProjectModalStateProps {

- src//hooks/useProjects.ts
7:type DatabaseProject = Database['public']['Tables']['projects']['Row'];
8:type ProjectInsert = Database['public']['Tables']['projects']['Insert'];
9:type ProjectUpdate = Database['public']['Tables']['projects']['Update'];
27:    autoEstimateDays: (dbProject.auto_estimate_days && typeof dbProject.auto_estimate_days === 'object') ? 

- src//services/ui/TimelinePositioning.ts
249:export interface ProjectBarPosition {

- src//services/ui/TimelineViewport.ts
43:export interface ProjectScrollParams {

- src//services/ui/DragCalculations.ts
15:import type { Project } from '@/types/core';

- src//services/unified/UnifiedProjectService.ts
181:export interface ProjectBudgetAnalysis {
190:export interface ProjectTimeValidation {
196:export interface ProjectDateValidation {

- src//services/unified/UnifiedProjectProgressService.ts
36:export interface ProjectStatus {
321:// Legacy interfaces for backward compatibility with ProjectProgressGraph component
337:export interface ProjectProgressAnalysis {

- src//services/unified/UnifiedEventWorkHourService.ts
42:export interface ProjectTimeAllocation {
62:export interface ProjectWorkingDaysResult {

- src//services/repositories/ProjectRepository.ts
17:export interface IProjectRepository {

- src//services/orchestrators/ProjectOrchestrator.ts
15:export interface ProjectValidationResult {
21:export interface ProjectMilestoneAnalysis {
31:export interface ProjectCreationRequest {
45:export interface ProjectUpdateRequest {

- src//services/calculations/completionCalculations.ts
21:export interface ProjectCompletionSummary {

- src//services/calculations/projectProgressCalculations.ts
10:export interface ProjectEvent {
26:export interface ProgressProject {
45:export interface ComprehensiveProjectTimeMetrics {

- src//services/calculations/insightCalculations.ts
1:import type { Project } from '@/types';

- src//services/calculations/projectStatusCalculations.ts
1:import type { Project } from '@/types';

- src//services/calculations/projectCalculations.ts
15:export interface ProjectWorkSlot {
21:export interface ProjectWeeklyWorkHours {
31:export interface ProjectHoliday {
37:export interface ProjectWorkingDaysSettings {

- src//services/calculations/projectOverlapCalculations.ts
13:export type { Project } from '@/types/core';

- src//services/index.ts
58:  type ProjectProgressAnalysis as ProjectProgressAnalysisLegacy
178:export { type ComprehensiveProjectTimeMetrics, type ProgressProject, type ProjectEvent as ProgressProjectEvent } from './calculations/projectProgressCalculations';
196:export { checkProjectOverlap, adjustProjectDatesForDrag, detectLiveDragConflicts, resolveDragConflicts, datesOverlap, calculateOverlapPercentage, type ConflictDetectionResult, type DateAdjustmentResult, type Project } from './calculations/projectOverlapCalculations';

- src//services/validators/ProjectValidator.ts
15:export interface ProjectValidationContext {
21:export interface DetailedProjectValidationResult {
44:export interface CreateProjectValidationRequest {
53:export interface UpdateProjectValidationRequest {
67:export interface OrphanedProject {
74:export interface MismatchedProject extends OrphanedProject {

- src//services/performance/performanceMetricsService.ts
20:import type { Project, Group, CalendarEvent, Holiday } from '@/types';

## Milestone Type Definitions
Files containing Milestone interfaces/types:
- src//types/core.ts
5:export interface Milestone {

- src//contexts/index.ts
11:export type { Project, Group, Row, Milestone } from '@/types/core';

- src//hooks/useMilestones.ts
6:type Milestone = Database['public']['Tables']['milestones']['Row'];
7:type MilestoneInsert = Database['public']['Tables']['milestones']['Insert'];
8:type MilestoneUpdate = Database['public']['Tables']['milestones']['Update'];

- src//services/ui/TimelinePositioning.ts
301:export interface MilestonePosition {

- src//services/unified/UnifiedMilestoneService.ts
26:export interface MilestoneValidationResult {
35:export interface MilestoneTimeDistributionEntry {
373:export interface MilestoneBudgetValidation {
381:export interface MilestoneTimeValidation {
387:export interface MilestoneDateValidation {

- src//services/repositories/MilestoneRepository.ts
14:export interface CreateMilestoneRequest {
22:export interface UpdateMilestoneRequest {
30:export interface MilestoneQueryFilters {
44:export interface IMilestoneRepository {

- src//services/orchestrators/ProjectTimelineOrchestrator.ts
23:export interface MilestoneSchedulingRequest {
30:export interface MilestoneSchedulingAnalysis {

- src//services/orchestrators/ProjectOrchestrator.ts
21:export interface ProjectMilestoneAnalysis {

- src//services/orchestrators/TimeAllocationOrchestrator.ts
7:import { memoizedGetProjectTimeAllocation, getMilestoneSegmentForDate, type MilestoneSegment, isPlannedTimeCompleted, calculateDayHeight } from '@/services';

- src//services/orchestrators/MilestoneOrchestrator.ts
22:export interface CreateMilestoneRequest {
30:export interface UpdateMilestoneRequest {
38:export interface MilestoneOperationResult {
47:export interface MilestoneCreationResult {

- src//services/calculations/milestoneCalculations.ts
304:export interface RecurringMilestoneConfig {
315:export interface RecurringMilestoneCalculationParams {
449:export interface MilestoneSegment {
459:export interface MilestoneDistributionEntry {
639:export interface LegacyMilestone {
658:export interface MilestoneValidationResult {

- src//services/calculations/projectProgressCalculations.ts
8:import type { Milestone as CoreMilestone } from '@/types/core';
18:export interface Milestone {

- src//services/index.ts
157:export { getMilestoneSegmentForDate, calculateMilestoneInterval, calculateMilestoneSegments, getEstimatedHoursForDate, getMilestoneForDate, getMilestonesInDateRange, type MilestoneSegment } from './calculations/milestoneCalculations';
158:export { MilestoneCalculationService, type MilestoneValidationResult, type LegacyMilestone, type RecurringPattern } from './calculations/milestoneCalculations';

- src//services/validators/MilestoneValidator.ts
44:export interface CreateMilestoneValidationRequest {
51:export interface UpdateMilestoneValidationRequest {

## Calculation Functions
All calculate* functions:
src//services/ui/TimelinePositioning.ts:23:export function calculateTimelinePositions(
src//services/ui/TimelinePositioning.ts:263:export function calculateProjectBarPosition(
src//services/ui/TimelinePositioning.ts:306:export function calculateMilestoneUIPosition(
src//services/ui/TimelinePositioning.ts:370:export function calculateRectangleHeight(hoursPerDay: number, maxHeight: number = 28): number {
src//services/ui/TimelinePositioning.ts:384:export function calculateProjectHeight(hoursPerDay: number): number {
src//services/ui/TimelinePositioning.ts:392:export function calculateDayHeight(hoursPerDay: number): number {
src//services/ui/TimelinePositioning.ts:400:export function calculateSegmentHeight(hoursPerDay: number): number {
src//services/ui/TimelinePositioning.ts:412:export function calculateTimelineBarPosition_LEGACY(
src//services/unified/UnifiedProjectService.ts:20:export function calculateProjectDuration(startDate: Date, endDate: Date): number {
src//services/unified/UnifiedProjectService.ts:29:export function calculateProjectProgress(
src//services/unified/UnifiedProjectService.ts:49:export function calculateProjectWorkload(project: Project): number {
src//services/unified/UnifiedProjectService.ts:57:export function calculateDailyWorkAllocation(
src//services/unified/UnifiedProjectService.ts:79:export function calculateMilestoneProgress(
src//services/unified/UnifiedProjectService.ts:102:export function calculateMilestoneTimeDistribution(
src//services/unified/UnifiedProjectService.ts:170:export function calculateProjectDuration_LEGACY(project: Project): number {
src//services/unified/UnifiedProjectProgressService.ts:107:export function calculateProjectProgressData(
src//services/unified/UnifiedProjectProgressService.ts:186:export function calculateProjectStatus(project: Project): ProjectStatus {
src//services/unified/UnifiedEventWorkHourService.ts:90:export function calculateEventWorkHourOverlap(
src//services/unified/UnifiedEventWorkHourService.ts:127:export function calculatePlannedTimeForDate(
src//services/unified/UnifiedEventWorkHourService.ts:149:export function calculateAvailabilityReduction(
src//services/unified/UnifiedEventWorkHourService.ts:219:export function calculateProjectWorkingDays(
src//services/unified/UnifiedEventWorkHourService.ts:443:export function calculateOvertimePlannedHours(
src//services/unified/UnifiedEventWorkHourService.ts:484:export function calculateTotalPlannedHours(
src//services/unified/UnifiedEventWorkHourService.ts:504:export function calculateOtherTime(
src//services/unified/UnifiedEventWorkHourService.ts:524:export function calculateDailyTimeBreakdown(
src//services/unified/UnifiedEventWorkHourService.ts:585:export function calculateEventStyle(
src//services/calculations/availabilityCalculations.ts:28:export function calculateAvailabilityCircleSize(
src//services/calculations/availabilityCalculations.ts:78:export function calculateAvailabilityVisualArea(sizing: AvailabilityCircleSizing): number {
src//services/calculations/milestoneCalculations.ts:18:export function calculateTotalAllocation(milestones: Milestone[]): number {
src//services/calculations/milestoneCalculations.ts:25:export function calculateBudgetUtilization(totalAllocated: number, projectBudget: number): number {
src//services/calculations/milestoneCalculations.ts:32:export function calculateRemainingBudget(totalAllocated: number, projectBudget: number): number {
src//services/calculations/milestoneCalculations.ts:39:export function calculateOverageAmount(totalAllocated: number, projectBudget: number): number {
src//services/calculations/milestoneCalculations.ts:46:export function calculateMilestoneDensity(
src//services/calculations/milestoneCalculations.ts:62:export function calculateAverageMilestoneAllocation(milestones: Milestone[]): number {
src//services/calculations/milestoneCalculations.ts:70:export function calculateAllocationDistribution(milestones: Milestone[]): {
src//services/calculations/milestoneCalculations.ts:96:export function calculateOptimalMilestoneSpacing(
src//services/calculations/milestoneCalculations.ts:119:export function calculateBusinessDaySpacing(
src//services/calculations/milestoneCalculations.ts:149:export function calculateTimelinePressure(
src//services/calculations/milestoneCalculations.ts:206:export function calculateMilestoneVelocity(
src//services/calculations/milestoneCalculations.ts:240:export function calculateSuggestedMilestoneBudget(
src//services/calculations/milestoneCalculations.ts:325:export function calculateRecurringMilestoneCount(params: RecurringMilestoneCalculationParams): number {
src//services/calculations/milestoneCalculations.ts:359:export function calculateRecurringTotalAllocation(params: RecurringMilestoneCalculationParams): number {
src//services/calculations/milestoneCalculations.ts:470:export function calculateMilestoneSegments(
src//services/calculations/milestoneCalculations.ts:566:export function calculateMilestoneInterval(
src//services/calculations/milestoneCalculations.ts:743:export function calculateDaysDifference(firstDate: Date | string, secondDate: Date | string): number {
src//services/calculations/milestoneCalculations.ts:805:export function calculateInputWidth(content: string, baseWidth: number = 80, charWidth: number = 8): number {
src//services/calculations/projectProgressCalculations.ts:72:export function calculateProjectDuration(project: ProgressProject): number {
src//services/calculations/projectProgressCalculations.ts:88:export function calculateEventDurationHours(event: ProjectEvent): number {
src//services/calculations/projectProgressCalculations.ts:204:export function calculateProgressPercentage(
src//services/calculations/projectProgressCalculations.ts:258:export function calculateProjectTimeMetrics(
src//services/calculations/projectProgressCalculations.ts:372:export function calculateProjectVelocity(
src//services/calculations/projectProgressCalculations.ts:424:export function calculateProjectMetrics(
src//services/calculations/insightCalculations.ts:30:export function calculateWeeklyCapacity(weeklyWorkHours: WeeklyWorkHours): number {
src//services/calculations/insightCalculations.ts:50:export function calculateDailyCapacity(date: Date, weeklyWorkHours: any): number {
src//services/calculations/insightCalculations.ts:78:export function calculateFutureCommitments(projects: Project[], referenceDate: Date = new Date()): number {
src//services/calculations/insightCalculations.ts:108:export function calculateTrackedHours(events: ReportEvent[]): number {
src//services/calculations/eventCalculations.ts:35:export function calculateEventDurationOnDate(params: EventDurationParams): number {
src//services/calculations/eventCalculations.ts:75:export function calculateEventTotalDuration(event: EventDurationParams['event'], dates: Date[]): number {
src//services/calculations/eventCalculations.ts:92:export function calculateLiveTrackingDuration(params: {
src//services/calculations/dragCalculations.ts:201:export function calculateDaysDelta(
src//services/calculations/dragCalculations.ts:243:export function calculateMousePositionChange(
src//services/calculations/dragCalculations.ts:344:export function calculateDragResult(
src//services/calculations/dragCalculations.ts:441:export function calculateSnapToGrid(
src//services/calculations/dragCalculations.ts:456:export function calculateAutoScroll(
src//services/calculations/dragCalculations.ts:557:export function calculateDragPerformanceMetrics(
src//services/calculations/dragCalculations.ts:608:export function calculateDragPositionUpdate(
src//services/calculations/projectStatusCalculations.ts:11:export function calculateProjectStatus(project: Project): {
src//services/calculations/projectCalculations.ts:48:export function calculateAutoEstimateWorkingDays(
src//services/calculations/projectCalculations.ts:105:export function calculateAutoEstimateHoursPerDay(
src//services/calculations/projectCalculations.ts:146:export function calculateWorkingDaysRemaining(
src//services/calculations/projectCalculations.ts:184:export function calculateTotalWorkingDays(
src//services/calculations/projectCalculations.ts:217:export function calculateValidDaysInPeriod(
src//services/calculations/projectCalculations.ts:241:export function calculateDayWorkHours(
src//services/calculations/holidayCalculations.ts:210:export function calculateBusinessDays(startDate: Date, endDate: Date): number {
src//services/calculations/timelinePositionCalculations.ts:74:export function calculateTimelinePositions(
src//services/calculations/timelinePositionCalculations.ts:192:export function calculateScrollbarPosition(
src//services/calculations/timelinePositionCalculations.ts:219:export function calculateScrollbarClickTarget(
src//services/calculations/timelinePositionCalculations.ts:237:export function calculateScrollbarDragTarget(
src//services/calculations/timelinePositionCalculations.ts:253:export function calculateScrollEasing(
src//services/calculations/timelinePositionCalculations.ts:279:export function calculateAnimationDuration(
src//services/calculations/timelinePositionCalculations.ts:292:export function calculateMouseToTimelineIndex(
src//services/calculations/timelinePositionCalculations.ts:322:export function calculateHolidayPosition(
src//services/calculations/timelinePositionCalculations.ts:356:export function calculateCenterScrollPosition(
src//services/calculations/timelinePositionCalculations.ts:375:export function calculateOccupiedHolidayIndices(
src//services/calculations/timelinePositionCalculations.ts:485:export function calculateMinimumHoverOverlaySize(
src//services/calculations/projectOverlapCalculations.ts:326:export function calculateOverlapPercentage(
src//services/calculations/settingsCalculations.ts:76:export function calculateDayTotalHours(slots: WorkSlot[]): number {
src//services/calculations/settingsCalculations.ts:83:export function calculateWorkSlotDuration(startTime: string, endTime: string): number {
src//services/calculations/settingsCalculations.ts:92:export function calculateSlotOverlapMinutes(slot1: WorkSlot, slot2: WorkSlot): number {
src//services/calculations/settingsCalculations.ts:169:export function calculateWeekTotalHours(weeklyWorkHours: WeeklyWorkSchedule): number {
src//services/calculations/timelineCalculations.ts:104:export function calculateProjectPosition(
src//services/calculations/timelineCalculations.ts:136:export function calculateMilestonePosition(
src//services/calculations/timelineCalculations.ts:163:export function calculateRowHeight(dailyHours: number, baseHeight: number = 40): number {
src//services/calculations/timelineCalculations.ts:173:export function calculateScrollToDate(
src//services/calculations/timelineCalculations.ts:190:export function calculateVisibleDateRange(
src//services/calculations/timelineCalculations.ts:210:export function calculateColumnPositions(
src//services/calculations/timelineCalculations.ts:232:export function calculateDragConstraints(
src//services/calculations/timelineCalculations.ts:291:export function calculateOptimalColumnWidth(
src//services/calculations/timelineCalculations.ts:304:export function calculateZoomConstraints(
src//services/calculations/timelineCalculations.ts:320:export function calculateWorkHoursTotal(workHours: any[]): number {
src//services/calculations/timelineCalculations.ts:330:export function calculateDayWidthPosition(dayWidths: number[], dayOfWeek: number): number {
src//services/calculations/timelineCalculations.ts:340:export function calculateBaselineVisualOffsets(
src//services/calculations/timelineCalculations.ts:397:export function calculateVisualProjectDates(
src//services/calculations/timelineCalculations.ts:436:export function calculateTimelineBarPosition(
src//services/calculations/timelineCalculations.ts:457:export function calculateWeekProjectIntersection(
src//services/calculations/timelineCalculations.ts:510:export function calculateProjectDays(
src//services/calculations/timelineCalculations.ts:555:export function calculateDayWorkHours(date: Date, settings: any): any[] {
src//services/calculations/timelineCalculations.ts:567:export function calculateTotalDayWorkHours(date: Date, settings: any): number {
src//services/calculations/capacityCalculations.ts:86:export function calculateWorkHourCapacity(
src//services/calculations/capacityCalculations.ts:141:export function calculateTimeOverlap(
src//services/calculations/capacityCalculations.ts:203:export function calculateWorkHourUtilization(capacity: WorkHourCapacity): number {
src//services/calculations/capacityCalculations.ts:269:export function calculateWorkHourCapacityWithHolidays(
src//services/calculations/capacityCalculations.ts:450:export function calculateAvailabilityReduction(
src//services/calculations/capacityCalculations.ts:497:export function calculateOvertimePlannedHours(
src//services/calculations/capacityCalculations.ts:534:export function calculateTotalPlannedHours(
src//services/calculations/capacityCalculations.ts:548:export function calculateOtherTime(
src//services/calculations/capacityCalculations.ts:608:export function calculateProjectWorkingDays(
src//services/calculations/capacityCalculations.ts:660:export function calculateCommittedHoursForDate(
src//services/calculations/eventOverlapCalculations.ts:79:export function calculateOverlapActions(params: EventOverlapParams): OverlapAction[] {
src//services/calculations/dateCalculations.ts:23:export function calculateDurationHours(startTime: Date, endTime: Date): number {
src//services/calculations/dateCalculations.ts:31:export function calculateDurationMinutes(startTime: Date, endTime: Date): number {
src//services/calculations/dateCalculations.ts:39:export function calculateDurationDays(startDate: Date, endDate: Date): number {
src//services/calculations/dateCalculations.ts:86:export function calculateTimeOverlapHours(
src//services/calculations/dateCalculations.ts:106:export function calculateTimeOverlapMinutes(
src//services/calculations/dateCalculations.ts:138:export function calculateBusinessDaysBetween(startDate: Date, endDate: Date, holidays: Date[] = []): number {
src//services/calculations/dateCalculations.ts:155:export function calculateBusinessDaysInRange(startDate: Date, endDate: Date, holidays: Date[] = []): Date[] {
src//services/calculations/dateCalculations.ts:182:export function calculateWorkingDaysInWeek(weekStart: Date, holidays: Date[] = []): Date[] {
src//services/calculations/dateCalculations.ts:190:export function calculateTimelineViewport(
src//services/calculations/dateCalculations.ts:218:export function calculateDateRangeOverlap(
src//services/calculations/dateCalculations.ts:235:export function calculateDayDifference(date1: Date, date2: Date): number {
src//services/calculations/dateCalculations.ts:280:export function calculateDateDuration(
src//services/calculations/calendarInsightCalculations.ts:23:export function calculateDailyTotals(
src//services/calculations/calendarInsightCalculations.ts:65:export function calculateTotalMinutes(dailyTotals: { [key: string]: number }): number {
src//services/calculations/calendarInsightCalculations.ts:72:export function calculateAverageMinutesPerDay(dailyTotals: { [key: string]: number }): number {
src//services/calculations/workHourCalculations.ts:74:export function calculateWorkHourDuration(startTime: Date, endTime: Date): number {
src//services/calculations/workHourCalculations.ts:405:export function calculateTimeFromPosition(params: TimeCalculationParams): Date {
src//services/calculations/workHourCalculations.ts:434:export function calculateDurationMinutes(startTime: Date, endTime: Date): number {
src//services/index.ts:122:export function calculateEventDurationOnDateLegacy(event: any, targetDate: Date): number {
src//services/validators/eventValidations.ts:155:export function calculateElapsedTime(start: Date, end: Date): number {
src//services/performance/performanceMetricsService.ts:72:export function calculateUsageMetrics(
src//services/performance/performanceMetricsService.ts:93:export function calculateMaxProjectsInGroup(
src//services/performance/performanceMetricsService.ts:260:export function calculatePerformanceScore(
src//services/performance/cachePerformanceService.ts:22:export function calculateCacheHitRate(stats: CacheStats): number {
src//services/performance/cachePerformanceService.ts:31:export function calculateCacheMetrics(stats: CacheStats): CacheMetrics {
